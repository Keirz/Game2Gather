{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\nvar _collections = require('../collections');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// SENTINEL constants are from https://github.com/facebook/immutable-js\nvar IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nvar IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\nvar IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nvar IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\nvar IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nvar IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4\n\nvar IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\nvar IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\nvar IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\nvar getImmutableName = function getImmutableName(name) {\n  return 'Immutable.' + name;\n};\nvar printAsLeaf = function printAsLeaf(name) {\n  return '[' + name + ']';\n};\nvar SPACE = ' ';\nvar LAZY = 'â€¦'; // Seq is lazy if it calls a method like filter\n\nvar printImmutableEntries = function printImmutableEntries(val, config, indentation, depth, refs, printer, type) {\n  return ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '{' + (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) + '}';\n}; // Record has an entries method because it is a collection in immutable v3.\n// Return an iterator for Immutable Record from version v3 or v4.\n\nfunction getRecordEntries(val) {\n  var i = 0;\n  return {\n    next: function next() {\n      if (i < val._keys.length) {\n        var key = val._keys[i++];\n        return {\n          done: false,\n          value: [key, val.get(key)]\n        };\n      }\n      return {\n        done: true,\n        value: undefined\n      };\n    }\n  };\n}\nvar printImmutableRecord = function printImmutableRecord(val, config, indentation, depth, refs, printer) {\n  // _name property is defined only for an Immutable Record instance\n  // which was constructed with a second optional descriptive name arg\n  var name = getImmutableName(val._name || 'Record');\n  return ++depth > config.maxDepth ? printAsLeaf(name) : name + SPACE + '{' + (0, _collections.printIteratorEntries)(getRecordEntries(val), config, indentation, depth, refs, printer) + '}';\n};\nvar printImmutableSeq = function printImmutableSeq(val, config, indentation, depth, refs, printer) {\n  var name = getImmutableName('Seq');\n  if (++depth > config.maxDepth) {\n    return printAsLeaf(name);\n  }\n  if (val[IS_KEYED_SENTINEL]) {\n    return name + SPACE + '{' + (\n    // from Immutable collection of entries or from ECMAScript object\n    val._iter || val._object ? (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) : LAZY) + '}';\n  }\n  return name + SPACE + '[' + (val._iter ||\n  // from Immutable collection of values\n  val._array ||\n  // from ECMAScript array\n  val._collection ||\n  // from ECMAScript collection in immutable v4\n  val._iterable // from ECMAScript collection in immutable v3\n  ? (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) : LAZY) + ']';\n};\nvar printImmutableValues = function printImmutableValues(val, config, indentation, depth, refs, printer, type) {\n  return ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '[' + (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) + ']';\n};\nvar serialize = function serialize(val, config, indentation, depth, refs, printer) {\n  if (val[IS_MAP_SENTINEL]) {\n    return printImmutableEntries(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map');\n  }\n  if (val[IS_LIST_SENTINEL]) {\n    return printImmutableValues(val, config, indentation, depth, refs, printer, 'List');\n  }\n  if (val[IS_SET_SENTINEL]) {\n    return printImmutableValues(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set');\n  }\n  if (val[IS_STACK_SENTINEL]) {\n    return printImmutableValues(val, config, indentation, depth, refs, printer, 'Stack');\n  }\n  if (val[IS_SEQ_SENTINEL]) {\n    return printImmutableSeq(val, config, indentation, depth, refs, printer);\n  } // For compatibility with immutable v3 and v4, let record be the default.\n\n  return printImmutableRecord(val, config, indentation, depth, refs, printer);\n}; // Explicitly comparing sentinel properties to true avoids false positive\n// when mock identity-obj-proxy returns the key as the value for any key.\n\nexports.serialize = serialize;\nvar test = function test(val) {\n  return val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);\n};\nexports.test = test;\nvar plugin = {\n  serialize: serialize,\n  test: test\n};\nvar _default = plugin;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}