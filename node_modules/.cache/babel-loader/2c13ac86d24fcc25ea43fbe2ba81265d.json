{"ast":null,"code":"'use strict';\n\nvar forEach = require('for-each');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('call-bind/callBound');\nvar gOPD = require('gopd');\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n  forEach(typedArrays, function (typedArray) {\n    if (typeof g[typedArray] === 'function') {\n      var arr = new g[typedArray]();\n      if (Symbol.toStringTag in arr) {\n        var proto = getPrototypeOf(arr);\n        var descriptor = gOPD(proto, Symbol.toStringTag);\n        if (!descriptor) {\n          var superProto = getPrototypeOf(proto);\n          descriptor = gOPD(superProto, Symbol.toStringTag);\n        }\n        toStrTags[typedArray] = descriptor.get;\n      }\n    }\n  });\n}\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n  var foundName = false;\n  forEach(toStrTags, function (getter, typedArray) {\n    if (!foundName) {\n      try {\n        var name = getter.call(value);\n        if (name === typedArray) {\n          foundName = name;\n        }\n      } catch (e) {}\n    }\n  });\n  return foundName;\n};\nvar isTypedArray = require('is-typed-array');\nmodule.exports = function whichTypedArray(value) {\n  if (!isTypedArray(value)) {\n    return false;\n  }\n  if (!hasToStringTag || !(Symbol.toStringTag in value)) {\n    return $slice($toString(value), 8, -1);\n  }\n  return tryTypedArrays(value);\n};","map":null,"metadata":{},"sourceType":"script"}