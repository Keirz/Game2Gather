{"ast":null,"code":"'use strict';\n\nvar $Map = typeof Map === 'function' && Map.prototype ? Map : null;\nvar $Set = typeof Set === 'function' && Set.prototype ? Set : null;\nvar exported;\nif (!$Set) {\n  // eslint-disable-next-line no-unused-vars\n  exported = function isSet(x) {\n    // `Set` is not present in this environment.\n    return false;\n  };\n}\nvar $mapHas = $Map ? Map.prototype.has : null;\nvar $setHas = $Set ? Set.prototype.has : null;\nif (!exported && !$setHas) {\n  // eslint-disable-next-line no-unused-vars\n  exported = function isSet(x) {\n    // `Set` does not have a `has` method\n    return false;\n  };\n}\nmodule.exports = exported || function isSet(x) {\n  if (!x || typeof x !== 'object') {\n    return false;\n  }\n  try {\n    $setHas.call(x);\n    if ($mapHas) {\n      try {\n        $mapHas.call(x);\n      } catch (e) {\n        return true;\n      }\n    }\n    return x instanceof $Set; // core-js workaround, pre-v2.5.0\n  } catch (e) {}\n  return false;\n};","map":null,"metadata":{},"sourceType":"script"}